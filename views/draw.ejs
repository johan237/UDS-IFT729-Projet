<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- <link rel="stylesheet" href="style.css"> -->
    <!-- <script src="/socket.io/socket.io.js" defer></script> -->
    <!-- <script src="customDraw.js" defer></script> -->
    <title>White Boarding</title>
    <style>
        * {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    padding: 0;
    margin: 0;
}

.btn-container {
    position: absolute;
    display: flex;
    flex-direction: column;
    top: 50%;
    left: 0;
    transform: translate(0%, -50%);
    background: white;
    border-radius: 0 10px 10px 0;
    padding: 0 0px 0px 0px;
}

.btn {
    background: white;
    outline: 1px solid #333;
    height: 40px;
    width: 80px;
    border: none;
    cursor: pointer;
}

.btn:hover {
    font-weight: bold;
}

.mt-2 {
    margin-top: 0.75rem;
}

.ml-2 {
    margin-left: 0.75rem;
}
    </style>
</head>

<body>



    <div class="btn-container">
        <button id="clear-btn" class="btn">Clear</button>
        <button id="black-btn" class="btn">Black</button>
        <button id="red-btn" class="btn">Red</button>
        <button id="blue-btn" class="btn">Blue</button>
        <button id="green-btn" class="btn">Green</button>
        <input type="color" class="btn" id="color-picker" />
    </div>
    <canvas id="my-canvas" height="500" width="500"></canvas>

</body>

<script type="importmap">
    {
      "imports": {
        "socket.io-client": "https://cdn.socket.io/4.7.4/socket.io.esm.min.js"
      }
    }
  </script>
  
<script type="module">
import { io } from "socket.io-client";
const canvas = document.getElementById("my-canvas");
const socket = io();


// Variables initialisation with canvas context and all the buttons
canvas.height = window.innerHeight;
canvas.width = window.innerWidth;

const ctx = canvas.getContext("2d");


const clearBtn = document.getElementById("clear-btn");
const redBtn = document.getElementById("red-btn");
const blueBtn = document.getElementById("blue-btn");
const greenBtn = document.getElementById("green-btn");
const blackBtn = document.getElementById("black-btn");
const colorPicker = document.getElementById("color-picker");

let drawing = false;

let x1, y1; // x1 and y1 represent the coordinates of the point of contact on the 2D canvas

// Event listeners for when the user uses the color picker or any other color as defined in the UI
colorPicker.addEventListener("blur", (e) => {
    ctx.strokeStyle = e.target.value;
    changeColor(e.target.value)
})

clearBtn.addEventListener("click", () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
})
redBtn.addEventListener("click", () => {
    changeColor('#FF0000')
})
blueBtn.addEventListener("click", () => {
    changeColor('#0000FF')
})
greenBtn.addEventListener("click", () => {
    changeColor('#00FF00')
})
blackBtn.addEventListener("click", () => {
    changeColor('#000000')
})

function changeColor(color) {
    ctx.strokeStyle = color;
    colorPicker.value = color;
}

canvas.addEventListener("mousedown", (e) => {
    init(e);
    socket.emit('initialising', { offsetX: e.offsetX, offsetY: e.offsetY })
})
canvas.addEventListener("mousemove", (e) => {
    draw(e);
    console.log("test")
    socket.emit('user-drawing', { color: ctx.strokeStyle, offsetX: e.offsetX, offsetY: e.offsetY })

})

canvas.addEventListener("mouseup", (e) => {
    drawing = false;
    socket.emit('user-not-drawing')
})


function init(e) {
    x1 = e.offsetX;
    y1 = e.offsetY;
    drawing = true;
}

function broadCastDraw(e) {
    let userColor = ctx.strokeStyle
    ctx.strokeStyle = e.color
    draw(e)
    ctx.strokeStyle = userColor
}


function draw(e) {
    if (drawing) {
        ctx.beginPath();
        ctx.moveTo(x1, y1)
        ctx.lineTo(e.offsetX, e.offsetY);
        ctx.stroke();
        ctx.closePath()
        x1 = e.offsetX;
        y1 = e.offsetY;

    }

}


socket.on('user-drawing', data => {
    broadCastDraw(data)
})

socket.on('initialising', data => {
    init(data)
})

socket.on('user-not-drawing', () => {
    drawing = false
})
</script>

</html>